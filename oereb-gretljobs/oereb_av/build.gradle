import ch.so.agi.gretl.tasks.*
import java.nio.file.Paths
import de.undercouch.gradle.tasks.download.Download

defaultTasks "replaceCadastralSurveyingData"

def GROUP = "AV-Import"

//def dbSchemas = ["stage", "live"]
def dbSchemas = ["live"]

def pathToTempFolder = System.getProperty("java.io.tmpdir")
def pathToUnzipFolder = Paths.get(pathToTempFolder, "unzip_data")
def iliModelAmtlicheVermessung = "DM01AVCH24LV95D"

def cadastralSurveyingBaseUrl = "https://s3.eu-central-1.amazonaws.com/ch.so.agi.av.dm01avch24lv95d/"
// Gemeinden mit Nutzungsplanung (2022-05-07)
def cadastralSurveyingDataSets = ["2401","2403","2405","2407","2408","2421","2424","2425","2426","2430","2445","2455","2456","2457","2461","2464","2471","2472","2473","2474","2475","2476","2477","2478","2479","2480","2481","2491","2492","2501","2502","2514","2516","2518","2523","2541","2542","2544","2545","2546","2548","2549","2550","2551","2554","2572","2573","2574","2575","2580","2581","2582","2584","2585","2586","2611","2612","2613","2614","2615","2616","2617","2618","2619","2620","2621","2622"]
//def cadastralSurveyingDataSets = ["2430", "2457", "2491", "2492", "2501", "2502", "2546", "2572", "2573", "2574", "2580", "2582", "2585", "2601"]
//def cadastralSurveyingDataSets = ["2430"]

cadastralSurveyingDataSets.each { cadastralSurveyingDataSet ->
    def dataSet = cadastralSurveyingDataSet.toString()
    task "downloadCadastralSurveyingData_$dataSet"(type: Download) {
        group = GROUP
        description = "Download AV-Datensatz: ${dataSet}"
        src cadastralSurveyingBaseUrl + dataSet + "00.itf.zip"
        dest pathToTempFolder
        overwrite true

        doLast {
            println "File downloaded to: " + pathToTempFolder
        }        
    }

    task "unzipCadastralSurveyingData_$dataSet"(type: Copy, dependsOn: "downloadCadastralSurveyingData_$dataSet") {
        group = GROUP
        description = "Unzip heruntergeladene Daten"
        from zipTree(Paths.get(pathToTempFolder, dataSet + "00.itf.zip"))
        into file(pathToUnzipFolder)
        include "**/*.itf"

        doLast {
            println "File unzipped to directory: " + pathToUnzipFolder
        }    
    }

    task "replaceCadastralSurveyingData_$dataSet"(type: Ili2pgReplace, dependsOn: "unzipCadastralSurveyingData_$dataSet") {
        group = GROUP
        description = "Import AV-Datensatz: ${dataSet}"
        database = [dbUriOerebV2, dbUserOerebV2, dbPwdOerebV2]
        models = iliModelAmtlicheVermessung
        dbschema = dbSchemas[0]
        dataFile = file(Paths.get(pathToUnzipFolder.toString(), dataSet + "00.itf"))
        topics = "DM01AVCH24LV95D.Liegenschaften;DM01AVCH24LV95D.Gemeindegrenzen;DM01AVCH24LV95D.Gebaeudeadressen"
        dataset = dataSet
        disableValidation = true

        doLast {
            println "Data imported into db: " + dbUriOerebV2
        }        
    }
}

task replaceCadastralSurveyingData() {
    description = "Aggregationstask für das Importieren/Ersetzen sämtlicher AV-Daten."
    group = GROUP
    dependsOn {
        tasks.findAll { task -> task.name.startsWith('replaceCadastralSurveyingData_') }
    }    
}